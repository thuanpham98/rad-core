{"version":3,"file":"rad-core.cjs","sources":["../src/rad-cores/index.ts","../src/rad-utils/rd-behaviour-subject.ts","../src/rad-utils/rd-stream.ts","../src/rad-utils/rd-bloc.ts","../src/rad-utils/rd-model-manager.ts","../src/rad-utils/rd-model-object.ts","../src/rad-utils/rd-modules-manager.ts","../src/rad-utils/rd-storages.ts","../src/rad-utils/rd-worker.ts","../src/rad-utils/rd-logger.ts","../src/rad-models/ErrorModel.ts"],"sourcesContent":["export abstract class RdCore {\r\n  protected abstract readonly key: symbol;\r\n}\r\n\r\nexport abstract class RdModule extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n}\r\n\r\nexport abstract class RdStorage extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract get sizeStorage(): number;\r\n  abstract getItem({ key }: { key: string }): string;\r\n  abstract setItem({ key, value }: { key: string; value: string }): void;\r\n  abstract removeItem({ key }: { key: string }): void;\r\n  abstract clearStorage(): void;\r\n}\r\n\r\nexport abstract class RdModel<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n  abstract value: T;\r\n}\r\n\r\nexport abstract class RdManager<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract use(m: T): RdManager<T>;\r\n  abstract remove(name: string): RdManager<T>;\r\n  abstract get<T2 extends T>(name: string): T2;\r\n  abstract get length(): number;\r\n  abstract clear(): void;\r\n}\r\n\r\nexport abstract class RdSubject<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract notify(): void;\r\n  abstract subscribe(o: RdObserver<T>): void;\r\n  abstract unsubcrise(o: RdObserver<T>): void;\r\n}\r\n\r\nexport abstract class RdObserver<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n  abstract update(s: RdSubject<T>): void;\r\n}\r\n\r\nexport abstract class RdOperation<Req, Resp> {\r\n  protected abstract readonly key: symbol;\r\n  abstract execute(arg: Req): Resp;\r\n}\r\n\r\nexport abstract class RdDecorator<T1, T2> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract operation: RdOperation<T1, T2>;\r\n}\r\n","import { RdObserver, RdSubject } from \"../rad-cores\";\r\n\r\nexport class RdBehaviourObserver<T> extends RdObserver<T> {\r\n  public readonly key: symbol;\r\n  public handler?: (v: T) => void;\r\n  constructor(h?: (v: T) => void) {\r\n    super();\r\n    this.key = Symbol(Date.now());\r\n    this.handler = h?.bind(this);\r\n  }\r\n  getName(): string {\r\n    return this.key.description ?? \"\";\r\n  }\r\n\r\n  update(s: RdBehaviorSubject<T>): void {\r\n    if (s instanceof RdBehaviorSubject) {\r\n      this.handler && this.handler(s.value);\r\n    }\r\n  }\r\n}\r\n\r\nexport class RdBehaviorSubject<T> extends RdSubject<T> {\r\n  public key: symbol;\r\n  public value: T;\r\n  private observer: Map<string, RdObserver<T>>;\r\n\r\n  constructor(init: T) {\r\n    super();\r\n    this.key = Symbol(Date.now());\r\n    this.value = init;\r\n    this.observer = new Map<string, RdObserver<T>>();\r\n  }\r\n\r\n  public subscribe(o: RdObserver<T>): void {\r\n    if (!this.observer.has(o.getName())) {\r\n      this.observer.set(o.getName(), o);\r\n    }\r\n  }\r\n\r\n  public unsubcrise(o: RdObserver<T>): void {\r\n    if (this.observer.has(o.getName())) {\r\n      this.observer.delete(o.getName());\r\n    }\r\n  }\r\n\r\n  public close(): void {\r\n    this.observer.clear();\r\n  }\r\n\r\n  public notify(): void {\r\n    this.observer.forEach((o: RdObserver<T>) => {\r\n      o.update(this);\r\n    });\r\n  }\r\n}\r\n","import { RdBehaviorSubject, RdBehaviourObserver } from \"./rd-behaviour-subject\";\r\n\r\nexport class RdStream<T> {\r\n  public key: symbol;\r\n  private subject: RdBehaviorSubject<T>;\r\n  private closed = false;\r\n\r\n  constructor(init: T) {\r\n    this.key = Symbol(Date.now());\r\n    this.subject = new RdBehaviorSubject<T>(init);\r\n  }\r\n\r\n  public next(t: T) {\r\n    if (!this.closed) {\r\n      this.subject.value = t;\r\n      this.subject.notify();\r\n    }\r\n  }\r\n\r\n  public subscribe(handler: (v: T) => void): void {\r\n    if (!this.closed) {\r\n      this.subject.subscribe(new RdBehaviourObserver<T>(handler));\r\n    }\r\n  }\r\n\r\n  public complete() {\r\n    if (!this.closed) {\r\n      this.subject.close();\r\n      this.closed = true;\r\n    }\r\n  }\r\n}\r\n","import { RdStream } from \"./rd-stream\";\r\n\r\nexport class RdBloc<T> {\r\n  public stream: RdStream<T>;\r\n  private _state: T;\r\n\r\n  constructor({\r\n    initState,\r\n    callback,\r\n  }: {\r\n    initState: T;\r\n    callback?: () => void | Promise<void>;\r\n  }) {\r\n    this._state = initState;\r\n    this.stream = new RdStream<T>(initState);\r\n    callback && callback();\r\n  }\r\n\r\n  public set state(s: T) {\r\n    this._state = s;\r\n  }\r\n\r\n  public get state(): T {\r\n    return this._state;\r\n  }\r\n\r\n  public upDateState(s?: T) {\r\n    if (s !== undefined) {\r\n      this._state = s;\r\n    }\r\n    this._state && this.stream.next(this._state);\r\n  }\r\n}\r\n","import { RdManager, RdModel } from \"../rad-cores\";\r\n\r\nexport class RdModelsManager extends RdManager<RdModel<NonNullable<unknown>>> {\r\n  private m!: Map<string, RdModel<NonNullable<unknown>>>;\r\n  public key!: symbol;\r\n  private static _instance: RdModelsManager;\r\n\r\n  constructor() {\r\n    if (!RdModelsManager._instance) {\r\n      super();\r\n      this.key = Symbol(\"RdModelsManager\");\r\n      this.m = new Map<string, RdModel<NonNullable<unknown>>>();\r\n      RdModelsManager._instance = this;\r\n    }\r\n    return RdModelsManager._instance as RdModelsManager;\r\n  }\r\n\r\n  /**\r\n   * use\r\n   */\r\n  public use(\r\n    m: RdModel<NonNullable<unknown>>,\r\n  ): RdManager<RdModel<NonNullable<unknown>>> {\r\n    this.m.set(m.getName(), m);\r\n    return RdModelsManager._instance as RdManager<\r\n      RdModel<NonNullable<unknown>>\r\n    >;\r\n  }\r\n\r\n  /**\r\n   * remove\r\n   */\r\n  public remove(name: string): RdManager<RdModel<NonNullable<unknown>>> {\r\n    if (this.m.has(name)) {\r\n      this.m.delete(name);\r\n    }\r\n    return RdModelsManager._instance as RdManager<\r\n      RdModel<NonNullable<unknown>>\r\n    >;\r\n  }\r\n\r\n  /**\r\n   * getMoels\r\n   */\r\n  public get<T2 extends RdModel<NonNullable<unknown>>>(name: string): T2 {\r\n    const ret = this.m.get(name);\r\n    if (ret === undefined) {\r\n      throw TypeError(\"Do not exist model\");\r\n    }\r\n    return this.m.get(name) as T2;\r\n  }\r\n\r\n  /**\r\n   * length\r\n   */\r\n  public get length(): number {\r\n    return this.m.size;\r\n  }\r\n\r\n  /**\r\n   * clear\r\n   */\r\n  public clear(): void {\r\n    return this.m.clear();\r\n  }\r\n}\r\n","import { RdModel } from \"../rad-cores\";\r\n\r\nexport class RdModelObject<T> extends RdModel<T> {\r\n  public readonly key: symbol;\r\n  public value: T;\r\n  constructor(v: T, name: string) {\r\n    super();\r\n    this.key = Symbol(`${name}`);\r\n    this.value = v;\r\n  }\r\n\r\n  public getName(): string {\r\n    return this.key.description ?? \"\";\r\n  }\r\n}\r\n","import { RdManager, RdModule } from \"../rad-cores\";\r\n\r\nexport class RdModulesManager<T extends RdModule> extends RdManager<T> {\r\n  private m!: Map<string, T>;\r\n  readonly key!: symbol;\r\n  private static _instance: RdModulesManager<RdModule>;\r\n\r\n  constructor() {\r\n    if (!RdModulesManager._instance) {\r\n      super();\r\n      this.m = new Map<string, T>();\r\n      this.key = Symbol(\"RdModulesManager\");\r\n      RdModulesManager._instance = this;\r\n    }\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * use\r\n   */\r\n  public use(m: T): RdModulesManager<T> {\r\n    this.m.set(m.getName(), m);\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * remove\r\n   */\r\n  public remove(name: string): RdModulesManager<T> {\r\n    if (this.m.has(name)) {\r\n      this.m.delete(name);\r\n    }\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * getModule\r\n   */\r\n  public get<T2 extends T>(name: string): T2 {\r\n    const ret = this.m.get(name);\r\n    if (ret === undefined) {\r\n      throw TypeError(\"Do not exist model\");\r\n    }\r\n    return this.m.get(name) as T2;\r\n  }\r\n\r\n  /**\r\n   * length\r\n   */\r\n  public get length(): number {\r\n    return this.m.size;\r\n  }\r\n\r\n  /**\r\n   * clear\r\n   */\r\n  public clear(): void {\r\n    return this.m.clear();\r\n  }\r\n}\r\n","import { RdStorage } from \"../rad-cores\";\r\n\r\nexport class RdLocalStorage extends RdStorage {\r\n  public readonly key: symbol;\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdLocalStorage\");\r\n  }\r\n  public get sizeStorage(): number {\r\n    return window && localStorage.length;\r\n  }\r\n\r\n  public getItem({ key }: { key: string }): string {\r\n    return (window && localStorage.getItem(key)) ?? \"\";\r\n  }\r\n  public setItem({ key, value }: { key: string; value: string }): void {\r\n    return window && localStorage.setItem(key, value);\r\n  }\r\n\r\n  public removeItem({ key }: { key: string }) {\r\n    return window && localStorage.removeItem(key);\r\n  }\r\n\r\n  public clearStorage() {\r\n    return window && localStorage.clear();\r\n  }\r\n}\r\n\r\nexport class RdSessionStorage extends RdStorage {\r\n  public readonly key: symbol;\r\n\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdSessionStorage\");\r\n  }\r\n  public get sizeStorage(): number {\r\n    return window && sessionStorage.length;\r\n  }\r\n\r\n  public getItem({ key }: { key: string }): string {\r\n    return (window && sessionStorage.getItem(key)) ?? \"\";\r\n  }\r\n  public setItem({ key, value }: { key: string; value: string }): void {\r\n    return window && sessionStorage.setItem(key, value);\r\n  }\r\n\r\n  public removeItem({ key }: { key: string }) {\r\n    return window && sessionStorage.removeItem(key);\r\n  }\r\n\r\n  public clearStorage() {\r\n    return window && sessionStorage.clear();\r\n  }\r\n}\r\n","export function rdCreateWorker(url: string | URL, option?: WorkerOptions) {\r\n  return new Worker(url, Object.assign({ type: \"module\" }, option));\r\n}\r\n","import { RdDecorator, RdOperation } from \"../rad-cores\";\r\n\r\nexport class RdLogger extends RdOperation<unknown, void> {\r\n  public readonly key: symbol;\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdLogger\");\r\n  }\r\n  execute(arg: unknown): void {\r\n    return console.log(arg);\r\n  }\r\n}\r\n\r\nexport class RdLoggerDecorator extends RdDecorator<unknown, void> {\r\n  public readonly key: symbol;\r\n  public operation: RdLogger;\r\n\r\n  constructor(o: RdLogger) {\r\n    super();\r\n    this.key = Symbol(`RdDecorator-${Date.now()}`);\r\n    this.operation = o;\r\n  }\r\n  public log(arg: unknown): void {\r\n    this.operation.execute(arg);\r\n  }\r\n}\r\n","export class ErrorModel {\r\n  code: number | string;\r\n  message: string | null | undefined;\r\n  constructor({\r\n    code,\r\n    message,\r\n  }: {\r\n    code: number | null | undefined | string;\r\n    message: string | null | undefined;\r\n  }) {\r\n    this.code = code ?? -1;\r\n    this.message = message ?? \"\";\r\n  }\r\n\r\n  public copyWith({\r\n    code,\r\n    message,\r\n  }: {\r\n    code: number;\r\n    message: string | null | undefined;\r\n  }): ErrorModel {\r\n    return new ErrorModel({\r\n      code: code ?? this.code,\r\n      message: message ?? this.message,\r\n    });\r\n  }\r\n}\r\n"],"names":["RdCore","RdModule","RdStorage","RdModel","RdManager","RdSubject","RdObserver","RdOperation","RdDecorator","RdBehaviourObserver","h","__publicField","s","RdBehaviorSubject","init","o","RdStream","handler","RdBloc","initState","callback","_RdModelsManager","__super","m","name","RdModelsManager","RdModelObject","v","_RdModulesManager","RdModulesManager","RdLocalStorage","key","value","RdSessionStorage","rdCreateWorker","url","option","RdLogger","arg","RdLoggerDecorator","ErrorModel","code","message"],"mappings":"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"}