{"version":3,"file":"rad-core.js","sources":["../src/rad-cores/index.ts","../src/rad-utils/rd-behaviour-subject.ts","../src/rad-utils/rd-stream.ts","../src/rad-utils/rd-bloc.ts","../src/rad-utils/rd-model-manager.ts","../src/rad-utils/rd-model-object.ts","../src/rad-utils/rd-modules-manager.ts","../src/rad-utils/rd-storages.ts","../src/rad-utils/rd-worker.ts","../src/rad-utils/rd-logger.ts","../src/rad-models/ErrorModel.ts"],"sourcesContent":["export abstract class RdCore {\r\n  protected abstract readonly key: symbol;\r\n}\r\n\r\nexport abstract class RdModule extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n}\r\n\r\nexport abstract class RdStorage extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract get sizeStorage(): number;\r\n  abstract getItem({ key }: { key: string }): string;\r\n  abstract setItem({ key, value }: { key: string; value: string }): void;\r\n  abstract removeItem({ key }: { key: string }): void;\r\n  abstract clearStorage(): void;\r\n}\r\n\r\nexport abstract class RdModel<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n  abstract value: T;\r\n}\r\n\r\nexport abstract class RdManager<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract use(m: T): RdManager<T>;\r\n  abstract remove(name: string): RdManager<T>;\r\n  abstract get<T2 extends T>(name: string): T2;\r\n  abstract get length(): number;\r\n  abstract clear(): void;\r\n}\r\n\r\nexport abstract class RdSubject<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract notify(): void;\r\n  abstract subscribe(o: RdObserver<T>): void;\r\n  abstract unsubcrise(o: RdObserver<T>): void;\r\n}\r\n\r\nexport abstract class RdObserver<T> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract getName(): string;\r\n  abstract update(s: RdSubject<T>): void;\r\n}\r\n\r\nexport abstract class RdOperation<Req, Resp> {\r\n  protected abstract readonly key: symbol;\r\n  abstract execute(arg: Req): Resp;\r\n}\r\n\r\nexport abstract class RdDecorator<T1, T2> extends RdCore {\r\n  protected abstract readonly key: symbol;\r\n  abstract operation: RdOperation<T1, T2>;\r\n}\r\n","import { RdObserver, RdSubject } from \"../rad-cores\";\r\n\r\nexport class RdBehaviourObserver<T> extends RdObserver<T> {\r\n  public readonly key: symbol;\r\n  public handler?: (v: T) => void;\r\n  constructor(h?: (v: T) => void) {\r\n    super();\r\n    this.key = Symbol(Date.now());\r\n    this.handler = h?.bind(this);\r\n  }\r\n  getName(): string {\r\n    return this.key.description ?? \"\";\r\n  }\r\n\r\n  update(s: RdBehaviorSubject<T>): void {\r\n    if (s instanceof RdBehaviorSubject) {\r\n      this.handler && this.handler(s.value);\r\n    }\r\n  }\r\n}\r\n\r\nexport class RdBehaviorSubject<T> extends RdSubject<T> {\r\n  public key: symbol;\r\n  public value: T;\r\n  private observer: Map<string, RdObserver<T>>;\r\n\r\n  constructor(init: T) {\r\n    super();\r\n    this.key = Symbol(Date.now());\r\n    this.value = init;\r\n    this.observer = new Map<string, RdObserver<T>>();\r\n  }\r\n\r\n  public subscribe(o: RdObserver<T>): void {\r\n    if (!this.observer.has(o.getName())) {\r\n      this.observer.set(o.getName(), o);\r\n    }\r\n  }\r\n\r\n  public unsubcrise(o: RdObserver<T>): void {\r\n    if (this.observer.has(o.getName())) {\r\n      this.observer.delete(o.getName());\r\n    }\r\n  }\r\n\r\n  public close(): void {\r\n    this.observer.clear();\r\n  }\r\n\r\n  public notify(): void {\r\n    this.observer.forEach((o: RdObserver<T>) => {\r\n      o.update(this);\r\n    });\r\n  }\r\n}\r\n","import { RdBehaviorSubject, RdBehaviourObserver } from \"./rd-behaviour-subject\";\r\n\r\nexport class RdStream<T> {\r\n  public key: symbol;\r\n  private subject: RdBehaviorSubject<T>;\r\n  private closed = false;\r\n\r\n  constructor(init: T) {\r\n    this.key = Symbol(Date.now());\r\n    this.subject = new RdBehaviorSubject<T>(init);\r\n  }\r\n\r\n  public next(t: T) {\r\n    if (!this.closed) {\r\n      this.subject.value = t;\r\n      this.subject.notify();\r\n    }\r\n  }\r\n\r\n  public subscribe(handler: (v: T) => void): void {\r\n    if (!this.closed) {\r\n      this.subject.subscribe(new RdBehaviourObserver<T>(handler));\r\n    }\r\n  }\r\n\r\n  public complete() {\r\n    if (!this.closed) {\r\n      this.subject.close();\r\n      this.closed = true;\r\n    }\r\n  }\r\n}\r\n","import { RdStream } from \"./rd-stream\";\r\n\r\nexport class RdBloc<T> {\r\n  public stream: RdStream<T>;\r\n  private _state: T;\r\n\r\n  constructor({\r\n    initState,\r\n    callback,\r\n  }: {\r\n    initState: T;\r\n    callback?: () => void | Promise<void>;\r\n  }) {\r\n    this._state = initState;\r\n    this.stream = new RdStream<T>(initState);\r\n    callback && callback();\r\n  }\r\n\r\n  public set state(s: T) {\r\n    this._state = s;\r\n  }\r\n\r\n  public get state(): T {\r\n    return this._state;\r\n  }\r\n\r\n  public upDateState(s?: T) {\r\n    if (s !== undefined) {\r\n      this._state = s;\r\n    }\r\n    this._state && this.stream.next(this._state);\r\n  }\r\n}\r\n","import { RdManager, RdModel } from \"../rad-cores\";\r\n\r\nexport class RdModelsManager extends RdManager<RdModel<NonNullable<unknown>>> {\r\n  private m!: Map<string, RdModel<NonNullable<unknown>>>;\r\n  public key!: symbol;\r\n  private static _instance: RdModelsManager;\r\n\r\n  constructor() {\r\n    if (!RdModelsManager._instance) {\r\n      super();\r\n      this.key = Symbol(\"RdModelsManager\");\r\n      this.m = new Map<string, RdModel<NonNullable<unknown>>>();\r\n      RdModelsManager._instance = this;\r\n    }\r\n    return RdModelsManager._instance as RdModelsManager;\r\n  }\r\n\r\n  /**\r\n   * use\r\n   */\r\n  public use(\r\n    m: RdModel<NonNullable<unknown>>,\r\n  ): RdManager<RdModel<NonNullable<unknown>>> {\r\n    this.m.set(m.getName(), m);\r\n    return RdModelsManager._instance as RdManager<\r\n      RdModel<NonNullable<unknown>>\r\n    >;\r\n  }\r\n\r\n  /**\r\n   * remove\r\n   */\r\n  public remove(name: string): RdManager<RdModel<NonNullable<unknown>>> {\r\n    if (this.m.has(name)) {\r\n      this.m.delete(name);\r\n    }\r\n    return RdModelsManager._instance as RdManager<\r\n      RdModel<NonNullable<unknown>>\r\n    >;\r\n  }\r\n\r\n  /**\r\n   * getMoels\r\n   */\r\n  public get<T2 extends RdModel<NonNullable<unknown>>>(name: string): T2 {\r\n    const ret = this.m.get(name);\r\n    if (ret === undefined) {\r\n      throw TypeError(\"Do not exist model\");\r\n    }\r\n    return this.m.get(name) as T2;\r\n  }\r\n\r\n  /**\r\n   * length\r\n   */\r\n  public get length(): number {\r\n    return this.m.size;\r\n  }\r\n\r\n  /**\r\n   * clear\r\n   */\r\n  public clear(): void {\r\n    return this.m.clear();\r\n  }\r\n}\r\n","import { RdModel } from \"../rad-cores\";\r\n\r\nexport class RdModelObject<T> extends RdModel<T> {\r\n  public readonly key: symbol;\r\n  public value: T;\r\n  constructor(v: T, name: string) {\r\n    super();\r\n    this.key = Symbol(`${name}`);\r\n    this.value = v;\r\n  }\r\n\r\n  public getName(): string {\r\n    return this.key.description ?? \"\";\r\n  }\r\n}\r\n","import { RdManager, RdModule } from \"../rad-cores\";\r\n\r\nexport class RdModulesManager<T extends RdModule> extends RdManager<T> {\r\n  private m!: Map<string, T>;\r\n  readonly key!: symbol;\r\n  private static _instance: RdModulesManager<RdModule>;\r\n\r\n  constructor() {\r\n    if (!RdModulesManager._instance) {\r\n      super();\r\n      this.m = new Map<string, T>();\r\n      this.key = Symbol(\"RdModulesManager\");\r\n      RdModulesManager._instance = this;\r\n    }\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * use\r\n   */\r\n  public use(m: T): RdModulesManager<T> {\r\n    this.m.set(m.getName(), m);\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * remove\r\n   */\r\n  public remove(name: string): RdModulesManager<T> {\r\n    if (this.m.has(name)) {\r\n      this.m.delete(name);\r\n    }\r\n    return RdModulesManager._instance as RdModulesManager<T>;\r\n  }\r\n\r\n  /**\r\n   * getModule\r\n   */\r\n  public get<T2 extends T>(name: string): T2 {\r\n    const ret = this.m.get(name);\r\n    if (ret === undefined) {\r\n      throw TypeError(\"Do not exist model\");\r\n    }\r\n    return this.m.get(name) as T2;\r\n  }\r\n\r\n  /**\r\n   * length\r\n   */\r\n  public get length(): number {\r\n    return this.m.size;\r\n  }\r\n\r\n  /**\r\n   * clear\r\n   */\r\n  public clear(): void {\r\n    return this.m.clear();\r\n  }\r\n}\r\n","import { RdStorage } from \"../rad-cores\";\r\n\r\nexport class RdLocalStorage extends RdStorage {\r\n  public readonly key: symbol;\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdLocalStorage\");\r\n  }\r\n  public get sizeStorage(): number {\r\n    return window && localStorage.length;\r\n  }\r\n\r\n  public getItem({ key }: { key: string }): string {\r\n    return (window && localStorage.getItem(key)) ?? \"\";\r\n  }\r\n  public setItem({ key, value }: { key: string; value: string }): void {\r\n    return window && localStorage.setItem(key, value);\r\n  }\r\n\r\n  public removeItem({ key }: { key: string }) {\r\n    return window && localStorage.removeItem(key);\r\n  }\r\n\r\n  public clearStorage() {\r\n    return window && localStorage.clear();\r\n  }\r\n}\r\n\r\nexport class RdSessionStorage extends RdStorage {\r\n  public readonly key: symbol;\r\n\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdSessionStorage\");\r\n  }\r\n  public get sizeStorage(): number {\r\n    return window && sessionStorage.length;\r\n  }\r\n\r\n  public getItem({ key }: { key: string }): string {\r\n    return (window && sessionStorage.getItem(key)) ?? \"\";\r\n  }\r\n  public setItem({ key, value }: { key: string; value: string }): void {\r\n    return window && sessionStorage.setItem(key, value);\r\n  }\r\n\r\n  public removeItem({ key }: { key: string }) {\r\n    return window && sessionStorage.removeItem(key);\r\n  }\r\n\r\n  public clearStorage() {\r\n    return window && sessionStorage.clear();\r\n  }\r\n}\r\n","export function rdCreateWorker(url: string | URL, option?: WorkerOptions) {\r\n  return new Worker(url, Object.assign({ type: \"module\" }, option));\r\n}\r\n","import { RdDecorator, RdOperation } from \"../rad-cores\";\r\n\r\nexport class RdLogger extends RdOperation<unknown, void> {\r\n  public readonly key: symbol;\r\n  constructor() {\r\n    super();\r\n    this.key = Symbol(\"RdLogger\");\r\n  }\r\n  execute(arg: unknown): void {\r\n    return console.log(arg);\r\n  }\r\n}\r\n\r\nexport class RdLoggerDecorator extends RdDecorator<unknown, void> {\r\n  public readonly key: symbol;\r\n  public operation: RdLogger;\r\n\r\n  constructor(o: RdLogger) {\r\n    super();\r\n    this.key = Symbol(`RdDecorator-${Date.now()}`);\r\n    this.operation = o;\r\n  }\r\n  public log(arg: unknown): void {\r\n    this.operation.execute(arg);\r\n  }\r\n}\r\n","export class ErrorModel {\r\n  code: number | string;\r\n  message: string | null | undefined;\r\n  constructor({\r\n    code,\r\n    message,\r\n  }: {\r\n    code: number | null | undefined | string;\r\n    message: string | null | undefined;\r\n  }) {\r\n    this.code = code ?? -1;\r\n    this.message = message ?? \"\";\r\n  }\r\n\r\n  public copyWith({\r\n    code,\r\n    message,\r\n  }: {\r\n    code: number;\r\n    message: string | null | undefined;\r\n  }): ErrorModel {\r\n    return new ErrorModel({\r\n      code: code ?? this.code,\r\n      message: message ?? this.message,\r\n    });\r\n  }\r\n}\r\n"],"names":["RdCore","RdModule","RdStorage","RdModel","RdManager","RdSubject","RdObserver","RdOperation","RdDecorator","RdBehaviourObserver","h","__publicField","s","RdBehaviorSubject","init","o","RdStream","handler","RdBloc","initState","callback","_RdModelsManager","__super","m","name","RdModelsManager","RdModelObject","v","_RdModulesManager","RdModulesManager","RdLocalStorage","key","value","RdSessionStorage","rdCreateWorker","url","option","RdLogger","arg","RdLoggerDecorator","ErrorModel","code","message"],"mappings":"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"}